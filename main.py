import hashlib
import requests
from bs4 import BeautifulSoup
import customtkinter as ctk
from customtkinter import *
from tkinter import filedialog
import time
import threading
import os


def request():
    url = 'https://bazaar.abuse.ch/export/txt/sha256/recent/'
    response = requests.get(url)
    result = response.text

    content = BeautifulSoup(result, 'lxml')
    #print(content.prettify())

    p_tag = content.find('p')
    p_text = p_tag.get_text()
    hashes_ = []
    for hash in p_text.split("\n"):
        if len(hash.strip()) == 64 and "#" not in hash.strip():
           hashes_.append(hash.strip())
    return hashes_

def scan_offline():
    hashes_ = []
    with open('full_sha256.txt', 'r') as file:
        for line in file:
            if len(line.strip()) == 64 and "#" not in line.strip():
                hashes_.append(line.strip())
    return hashes_


def scan_file(file, text_var, var1, var2, var3):
    thehash = hashlib.sha256()
    with open(file, 'rb') as f:
        while chunk := f.read(8192):  # Read the file in chunks
            thehash.update(chunk)
    print(thehash.hexdigest())
    
    pattern = os.getcwd()
    text_var.set("")
    progression = True
    thread = True
    
    if var1.get() == 'on' and var2.get() == 'on':   ## var1 is for online checkbox, and var2 is for offline checkbox
        hashes = []
        request_thread = threading.Thread(target=lambda: hashes.extend(request()))
        request_thread.start()
        hashes.extend(scan_offline())
    elif var1.get() == 'on' and var2.get() == 'off':
        hashes = []
        request_thread = threading.Thread(target=lambda: hashes.extend(request()))
        request_thread.start()
    elif var1.get() == 'off' and var2.get() == 'on':
        hashes = []
        hashes.extend(scan_offline())
        thread = False
    else:
        hashes = []
        progression = False
        thread = False

    if progression:
        step = 0
        total_steps = 99
        while step <= total_steps:
            text_var.set(f"Prosessing... {step}%")
            time.sleep(0.04)
            step += 1
        text_var.set(f"Prosessing... 99%")
        time.sleep(0.2)
    if thread:
        request_thread.join()
    
    if pattern in file:
        file = file.replace(pattern, '')
    
    corrupted = True
    for i in range(len(hashes)):
        if thehash.hexdigest() == hashes[i]:
            corrupted = True
            break
        else:
            corrupted = False
    
    
    if len(hashes) == 0:
        text_var.set("Couldn't load database")
    elif corrupted == True and var3.get() == 'on':
        os.remove(file)
        text_var.set(f"searches: {len(hashes)}\nsuccessfully deleted malicious file")
    elif corrupted == True and var3.get() == 'off':
        text_var.set(f"searches: {len(hashes)}\n{file} is corrupted")
    elif corrupted == False:
        text_var.set(f"searches: {len(hashes)}\n{file} is safe")
    else:
        text_var.set("Couldn't indentify")

    
def import_file(text, check_var_1, check_var_2, check_var_3):
    f_path = filedialog.askopenfilename(initialdir=os.getcwd(), title="Import file")

    threading.Thread(target=scan_file, args=(f_path, text, check_var_1, check_var_2, check_var_3)).start()

def main():
    window = ctk.CTk()
    window.title('Simple Malware Scanner')
    window.geometry('350x200')


    check_variable_1 = ctk.StringVar(value="off")
    check_variable_2 = ctk.StringVar(value="off")
    check_variable_3 = ctk.StringVar(value="off")
    
    check_1 = ctk.CTkCheckBox(master=window,
                              text="scan online",
                              font=("Calibri", 16),
                              variable=check_variable_1,
                              onvalue="on",
                              offvalue="off",)
    check_1.place(relx=0.5, rely=0.10, anchor="center")
    
    check_2 = ctk.CTkCheckBox(master=window,
                              text="scan offline",
                              font=("Calibri", 16),
                              variable=check_variable_2,
                              onvalue="on",
                              offvalue="off",)
    check_2.place(relx=0.5, rely=0.25, anchor="center")
    
    check_3 = ctk.CTkCheckBox(master=window,
                              text="remove file",
                              font=("Calibri", 16),
                              variable=check_variable_3,
                              onvalue="on",
                              offvalue="off",)
    check_3.place(relx=0.5, rely=0.40, anchor="center")
    
    button = CTkButton(master=window, 
                    text='Import file', 
                    corner_radius=20, 
                    width=130, 
                    height=35, 
                    font=("Calibri", 16, "bold"), 
                    fg_color="#7546D2", 
                    hover_color="#8745D2", 
                    text_color="#FFFFFF", 
                    command=lambda: import_file(text, check_variable_1, check_variable_2, check_variable_3))
    button.place(relx=0.5, rely=0.60, anchor="center")

    text = ctk.StringVar()
    label = ctk.CTkLabel(master=window, 
                        text="Hello There!", 
                        font=("Calibri", 18, "bold"), 
                        text_color="#FFFFFF", 
                        textvariable = text)
    label.place(relx=0.5, rely=0.82, anchor="center")

    window.mainloop()

if __name__ == '__main__':
    main()